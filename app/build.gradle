apply plugin: 'com.android.application'

ext {
    wsApiUserId = System.getenv("WS_API_USER_ID")
    wsApiKey = System.getenv("WS_API_KEY")
    if (!wsApiKey) {
        wsApiUserId = "" // <---------------------------------- put your API userId here
        wsApiKey = ""    // <---------------------------------- put your API key here
    }

    useProduction = System.getenv("WS_USE_PRODUCTION") != null
}

repositories {
    google()
    jcenter()
    maven { url "https://jitpack.io" }
}

// This stanza will turn on checking for unchecked conversion and deprecation.
//allprojects {
//    gradle.projectsEvaluated {
//        tasks.withType(JavaCompile) {
//            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
//        }
//    }
//}

android {
    buildToolsVersion "28.0.3" // also update in .travis.yml

    def doSignRelease = false
    signingConfigs {
        debug {
            storeFile file("../keystores/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        release {
            if (project.hasProperty('keystoreFile')) {
                doSignRelease = true

                // Set these values in local.properties.
                storeFile file(keystoreFile)
                storePassword keystorePassword
                keyAlias keystoreKeyAlias
                keyPassword keystoreKeyPassword
            }
        }
    }
    buildTypes {
        all {
            // We pin the intermediate as the WS SSL key-pair is rotated every three months.
            // CN=Let's Encrypt Authority X3, Expires 2021-03-17
            buildConfigField 'String', 'WS_CERTIFICATE_PIN', '"sha256/YLh1dUR9y6Kja30RrAn7JKnbQG/uEtLMkBgFF2Fuihg="'

            if (useProduction) {
                buildConfigField 'String', 'WS_BASE_URL', '"https://www.warmshowers.org/"'
            } else {
                buildConfigField 'String', 'WS_BASE_URL', '"https://dev.warmshowers.org/"'
            }
        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            resValue 'string', 'account_type', 'org.warmshowers.debug'
            buildConfigField 'String', 'ACCOUNT_TYPE', '"org.warmshowers.debug"'
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules/dagger.pro',
                    'proguard-rules/gson.pro',
                    'proguard-rules/okhttp3.pro',
                    'proguard-rules/retrofit2.pro'

            if (doSignRelease) {
                signingConfig signingConfigs.release
            }
            resValue 'string', 'account_type', 'org.warmshowers'
            buildConfigField 'String', 'ACCOUNT_TYPE', '"org.warmshowers"'
        }
    }

    defaultConfig {
        if(!wsApiUserId) {
            throw new GradleException("No API userId specified! Add yours to app/build.gradle")
        }
        if(!wsApiKey) {
            throw new GradleException("No API key specified! Add yours to app/build.gradle")
        }

        buildConfigField 'String', 'WS_API_USER_ID', "\"$wsApiUserId\""
        buildConfigField 'String', 'WS_API_KEY', "\"$wsApiKey\""
    }
    flavorDimensions "mode"
    productFlavors {
        floss {
            dimension "mode"
        }
        google {
            dimension "mode"
        }
    }

    lintOptions {
        // FIXME(saemy): Make this an error for release builds on travis.
        warning 'MissingTranslation'
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = isPreDexEnabled && !isTravisBuild
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    def versionMajor = 3
    def versionMinor = 0
    def versionPatch = 1
    def versionBuild = 0 // bump for dogfood builds, public betas, etc.

    defaultConfig {
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild

        minSdkVersion 16
        compileSdkVersion 28 // also update in .travis.yml
        targetSdkVersion 28

        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

ext {
    androidxTestVersion = '1.0.0'
    assertjVersion = '3.9.0'
    bubbleSeekbarVersion = '3.20'
    butterknifeVersion = '8.8.1'
    constraintLayoutVersion = '1.1.3'
    daggerVersion = '2.15'
    glideVersion = '4.8.0'
    gsonVersion = '2.8.1'
    jsonVersion = '20170516'
    junitVersion = '4.12'
    mockitoVersion = '2.27.0'
    okHttpVersion = '3.12.0'
    osmbonuspackVersion = '6.5.2'
    osmdroidVersion = '6.0.2'
    playServicesVersion = '11.6.2'
    retrofitVersion = '2.5.0' // Dictates version of okhttp in their dependencies which clashes in tests.
    robolectricVersion = '4.1'
    rxAndroidVersion = '2.0.2'
    rxJavaVersion = '2.1.7'
    securekeysVersion = '2.2.0' // Adjust the version in the project's build.gradle, too.
    supportLibVersion = '28.0.0'
}

dependencies {
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"
    annotationProcessor "com.google.dagger:dagger-android-processor:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterknifeVersion"
    annotationProcessor "com.saantiaguilera.securekeys:annotation:$securekeysVersion"
    annotationProcessor "com.saantiaguilera.securekeys:processor:$securekeysVersion"
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support:cardview-v7:$supportLibVersion"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"
    implementation "com.android.support:design:$supportLibVersion"
    implementation "com.android.support:preference-v14:$supportLibVersion"
    implementation "com.android.support:support-v4:$supportLibVersion"
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    implementation "com.github.MKergall:osmbonuspack:$osmbonuspackVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    implementation "com.jakewharton:butterknife:$butterknifeVersion"
    implementation "com.saantiaguilera.securekeys:core:$securekeysVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.xw.repo:bubbleseekbar:$bubbleSeekbarVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "org.osmdroid:osmdroid-android:$osmdroidVersion"

    googleImplementation "com.google.android.gms:play-services-analytics:$playServicesVersion"

    androidTestAnnotationProcessor "com.google.dagger:dagger-android-processor:$daggerVersion"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    testImplementation "androidx.test:core:$androidxTestVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okHttpVersion"
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "org.json:json:$jsonVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.robolectric:shadows-supportv4:$robolectricVersion"
}

// Apply the securekeys plugin at the end
apply plugin: 'saantiaguilera.securekeys'
